#include <click/config.h>
#include "garblespeaker.hh"
#include <click/args.hh>
#include <click/error.hh>
#include <click/router.hh>
#include <click/standard/scheduleinfo.hh>
#include <click/glue.hh>
#include <click/straccum.hh>
#include <click/handlercall.hh>
#include <click/signaturetable.hh>
#include "justGarble.hh"
CLICK_DECLS

GarbleSpeaker::GarbleSpeaker()
  :_task(this)
{
}

GarbleSpeaker::~GarbleSpeaker()
{
}

  void *
GarbleSpeaker::cast(const char *n)
{
  if (strcmp(n, class_name()) == 0)
    return static_cast<Element *>(this);
  else
    return 0;
}

  int
GarbleSpeaker::configure(Vector<String> &conf, ErrorHandler *errh)
{
  gt = new GlobalSignatureTable();
  gt->setIsMaster();
}

  int
GarbleSpeaker::initialize(ErrorHandler *errh)
{
  std::cout << "Initializing the GarbleSpeaker." << std::endl;
  ScheduleInfo::initialize_task(this, &_task, true, errh);
}

  void
GarbleSpeaker::cleanup(CleanupStage)
{
}

  bool
GarbleSpeaker::run_task(Task *)
{
  char* key = "lovelovelovelove";
  GarbledCircuit gc;
  GarblingContext cxt;
  JustineFixedKeyAESCircuit(&gc, &cxt, (unsigned char*) key);
  
  while(true){
    for(int i = 0; i < GlobalSignatureTable::tablesCount; i++){
      ThreadLocalSignatureTable* st = GlobalSignatureTable::allTables[i];
      if(st->pending_tail != st->pending_head){
        ConnectionID* next = &(st->pending_connections_queue[st->pending_head % MAX_CONNECTIONS]);
        void* data = st->active_connections->get_related_data((unsigned char*) next, sizeof(ConnectionID));
        ConnRecord* record = (ConnRecord*) data;
        record->status = ALLOW;
        st->pending_head++;
      }
    }
  }
  return true;
}

CLICK_ENDDECLS
EXPORT_ELEMENT(GarbleSpeaker)
